MODULE EGMCommunication
    VAR egmident egm_id;
    VAR egmstate egm_state;
 
    ! Convergence criteria for translation and rotation (in degrees)
    CONST egm_minmax egm_minmax_translation := [-1, 1];
    CONST egm_minmax egm_minmax_rotation := [-1, 1];
    
    LOCAL CONST pose egm_correction_frame := [[0, 0, 0], [1, 0, 0, 0]];
    LOCAL CONST pose egm_sensor_frame := [[0, 0, 0], [1, 0, 0, 0]];
    
    PROC main()
        EGM_POSE_MOVEMENT;
    ENDPROC
    
    PROC EGM_POSE_MOVEMENT()
        ! Check if no EGM setup is active.
        IF egm_state = EGM_STATE_DISCONNECTED THEN
            TPWrite "EGM State: Preparing controller for EGM communication.";
        ENDIF
            
        WHILE TRUE DO            
            ! Register a new EGM id.
            EGMGetId egm_id;

            ! Get current state of egm_id.
            egm_state := EGMGetState(egm_id);

            ! Setup the EGM communication.
            ! Make sure the device name is the same as in the communication tab.
            IF egm_state <= EGM_STATE_CONNECTED THEN
                EGMSetupUC ROB_1, egm_id, "default", "PC", \Pose; 
            ENDIF
            
            ! From manual:
            ! LpFilter: Input data reading sample rate in multiples of 4 milliseconds.
            ! MaxSpeedDeviation: Maximum admitted joint speed change in degrees/second. All joints will be reduced with the same ratio if one joint is limited.
            EGMActPose egm_id\Tool:=tool0, 
                       egm_correction_frame,
                       EGM_FRAME_BASE,
                       egm_sensor_frame,
                       EGM_FRAME_BASE
                       \x:=egm_minmax_translation
                       \y:=egm_minmax_translation
                       \z:=egm_minmax_translation
                       \rx:=egm_minmax_rotation
                       \ry:=egm_minmax_rotation
                       \rz:=egm_minmax_rotation
                       \LpFilter:= 16
                       \MaxSpeedDeviation:=100;                        
                       
            ! From manual:
            ! EGMRunPose performs a sensor guided movement to a pose target from a fine point for a specific EGM process (EGMid) and defines which directions and orientations may be changed.
            ! RampInTime: Defines in seconds how fast the movement is started.
            EGMRunPose egm_id, EGM_STOP_HOLD \x \y \z \rx \ry \rz \CondTime:=1\RampInTime:=0;

            ! Check if robot is listening for external commands.
            IF egm_state = EGM_STATE_CONNECTED THEN
                TPWrite "EGM State: Waiting for movement request.";
            ENDIF
            
            ! Check if the robot received an external command and is moving.
            IF egm_state = EGM_STATE_RUNNING THEN
                TPWrite "EGM State: Movement request received. Robot is moving.";
            ENDIF
            
            ! Reset EGM communication.
            IF egm_state <= EGM_STATE_CONNECTED THEN
                EGMReset egm_id;
            ENDIF
        ENDWHILE

        ERROR
        IF ERRNO = ERR_UDPUC_COMM THEN
            TPWrite "EGM Warning: Robot is not detecting any external devices.";
            TRYNEXT;
        ENDIF
    ENDPROC
ENDMODULE